var searchIndex = JSON.parse('{\
"modalcell":{"doc":"ModalCell","t":"QDDIDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLALLLLLLLLLLLLLLLLLLLLLLL","n":["Container","ExclusiveCell","ExclusiveMode","Mode","RefMut","SharedCell","SharedMode","SingleThreaded","ThreadSafe","as_exclusive","as_shared","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref_mut","from","from","from","from","from","from","from","get","get_mut","into","into","into","into","into","into","into","new","new","new","new","new_cell","new_cell","new_threadsafe","ptr_eq","ptr_eq","ptr_eq","safety","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"modalcell"]],"d":["The container type used by this tag type.","A wrapper type that guarantees memory safety by only …","A tag that allows exclusive access to the underlying …","A trait controlling how <code>SharedMode</code> and all associated …","A wrapper to an exclusive reference to an <code>ExclusiveCell</code>’…","A read-only reference to a <code>ExclusiveCell</code>.","A tag that allows read-only access to its associated …","A <code>Mode</code> that uses <code>Rc</code>, which is optimized for …","A <code>Mode</code> that uses <code>Arc</code> for thread-safety.","Begin a write session, allowing mutable access to …","Returns a clone of this cell that can only be used to read …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a read-only reference to the contained value.","Returns a <code>RefMut</code> providing exclusive access to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new container wrapping <code>value</code>.","Returns a new instance that can only be used in …","","","Returns a new <code>ExclusiveCell</code> associated with the underlying …","Returns a new <code>ExclusiveCell</code> associated with this mode.","Returns a new instance that can be used in multi-threaded …","Returns true if <code>a</code> and <code>b</code> represent the same underlying …","","","Documentation and doctests attempting to prove the safety …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,0,2,4,2,3,4,5,6,8,7,2,3,4,5,6,8,7,3,5,3,5,2,6,6,2,3,4,5,6,8,7,5,4,2,3,4,5,6,8,7,1,2,8,7,2,3,2,1,8,7,0,3,5,2,3,4,5,6,8,7,2,3,4,5,6,8,7,2,3,4,5,6,8,7],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[3,[1]]]],[[[4,[1]]],[[5,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1]]],[[3,[1]]]],[[[5,[1]]],[[5,[1]]]],[[]],[[]],[[],[[2,[1]]]],[[[6,[1]]]],[[[6,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[1]],[2,[1]]]],[[[4,[1]],[3,[1]]],[[6,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[7]]]],[[]],[[]],[[[2,[1]]],[[4,[1]]]],[[[3,[1]]],[[4,[1]]]],[[],[[2,[8]]]],[[],9],[[],9],[[],9],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11]],"c":[],"p":[[8,"Mode"],[3,"SharedMode"],[3,"ExclusiveMode"],[3,"ExclusiveCell"],[3,"SharedCell"],[3,"RefMut"],[3,"SingleThreaded"],[3,"ThreadSafe"],[15,"bool"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
