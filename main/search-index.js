var searchIndex = JSON.parse('{\
"modalcell":{"doc":"ModalCell","t":"IQDDDDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLAALLLLLLLLLLLLLLLLLLLLGGGGGELLLLLLLLL","n":["Behavior","Container","ExclusiveCell","ExclusiveMode","RefMut","SharedCell","SharedMode","SingleThreaded","as_exclusive","as_shared","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref_mut","from","from","from","from","from","from","get","get_mut","get_mut_unchecked","get_unchecked","into","into","into","into","into","into","new","new","new","new_cell","new_cell","new_threadsafe","ptr_eq","ptr_eq","safety","threadsafe","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ExclusiveCell","ExclusiveMode","RefMut","SharedCell","SharedMode","ThreadSafe","borrow","borrow_mut","from","into","new","ptr_eq","try_from","try_into","type_id"],"q":[[0,"modalcell"],[75,"modalcell::threadsafe"]],"d":["A trait controlling how <code>SharedMode</code> and all associated …","The container type used by this tag type.","A wrapper type that guarantees memory safety by only …","A tag that allows exclusive access to the underlying …","A wrapper to an exclusive reference to an <code>ExclusiveCell</code>’…","A read-only reference to a <code>ExclusiveCell</code>.","A tag that allows read-only access to its associated …","A <code>Behavior</code> that uses <code>Rc</code>, which is optimized for …","Begin a write session, allowing mutable access to …","Returns a clone of this cell that can only be used to read …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a read-only reference to the contained value.","Returns a <code>RefMut</code> providing exclusive access to the …","Returns a <code>RefMut</code> providing exclusive access to the …","Returns a read-only reference to the contained value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new container wrapping <code>value</code>.","Returns a new instance that can only be used in …","","Returns a new <code>ExclusiveCell</code> associated with the underlying …","Returns a new <code>ExclusiveCell</code> associated with this mode.","Returns a new instance that can be used in multi-threaded …","Returns true if <code>a</code> and <code>b</code> represent the same underlying …","","This module documents the reasoning behind this crate’s …","Types for using this crate with multi-threaded code.","","","","","","","","","","","","","","","","","","","","","A type alias for <code>ExclusiveCell</code> using the <code>ThreadSafe</code> …","A type alias for <code>ExclusiveMode</code> using the <code>ThreadSafe</code> …","A type alias for <code>RefMut</code> using the <code>ThreadSafe</code> behavior.","A type alias for <code>SharedCell</code> using the <code>ThreadSafe</code> behavior.","A type alias for <code>SharedMode</code> using the <code>ThreadSafe</code> behavior.","A <code>Behavior</code> that uses <code>Arc</code> for thread-safety.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,0,0,0,0,0,0,2,4,2,3,4,5,6,7,2,3,4,5,6,7,3,5,3,5,2,6,6,2,3,4,5,6,7,5,4,4,5,2,3,4,5,6,7,1,2,7,2,3,2,1,7,0,0,3,5,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8],"f":[0,0,0,0,0,0,0,0,[[[2,[1]]],[[3,[1]]]],[[[4,[1]]],[[5,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1]]],[[3,[1]]]],[[[5,[1]]],[[5,[1]]]],[[]],[[]],[[],[[2,[1]]]],[[[6,[1]]]],[[[6,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[1]],[2,[1]]]],[[[4,[1]],[3,[1]]],[[6,[1]]]],[[[4,[1]],[3,[1]]],[[6,[1]]]],[[[5,[1]],[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[7]]]],[[]],[[[2,[1]]],[[4,[1]]]],[[[3,[1]]],[[4,[1]]]],[[],[[2,[8]]]],[[],9],[[],9],0,0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],9],[[],10],[[],10],[[],11]],"c":[],"p":[[8,"Behavior"],[3,"SharedMode"],[3,"ExclusiveMode"],[3,"ExclusiveCell"],[3,"SharedCell"],[3,"RefMut"],[4,"SingleThreaded"],[4,"ThreadSafe"],[15,"bool"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
